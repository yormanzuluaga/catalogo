const mongoose = require('mongoose');
const Product = require('../src/models/product.model');
require('dotenv').config();

/**
 * Migraci√≥n para agregar el campo 'images' a productos existentes
 */
async function migrateProducts() {
    try {
        console.log('üîÑ Iniciando migraci√≥n de productos...');

        // Conectar a la base de datos
        await mongoose.connect(process.env.MONGODB_CNN);
        console.log('‚úÖ Conectado a la base de datos');

        // Buscar productos que no tengan el campo 'images'
        const productsToUpdate = await Product.find({
            images: { $exists: false }
        });

        console.log(`üìä Encontrados ${productsToUpdate.length} productos para actualizar`);

        if (productsToUpdate.length === 0) {
            console.log('‚úÖ No hay productos que necesiten migraci√≥n');
            return;
        }

        // Actualizar productos agregando el campo 'images' como array vac√≠o
        const updateResult = await Product.updateMany(
            { images: { $exists: false } },
            { $set: { images: [] } }
        );

        console.log(`‚úÖ Migraci√≥n completada: ${updateResult.modifiedCount} productos actualizados`);

        // Verificar la migraci√≥n
        const verificationCount = await Product.countDocuments({
            images: { $exists: true }
        });

        console.log(`üîç Verificaci√≥n: ${verificationCount} productos ahora tienen el campo 'images'`);

    } catch (error) {
        console.error('‚ùå Error durante la migraci√≥n:', error);
    } finally {
        // Cerrar conexi√≥n
        await mongoose.connection.close();
        console.log('üì™ Conexi√≥n a la base de datos cerrada');
    }
}

/**
 * Migraci√≥n para actualizar el campo 'avatar' en usuarios si no existe
 */
async function migrateUsers() {
    try {
        console.log('üîÑ Iniciando migraci√≥n de usuarios...');

        const User = require('../src/models/user.model');

        // Conectar a la base de datos si no est√° conectada
        if (mongoose.connection.readyState === 0) {
            await mongoose.connect(process.env.MONGODB_CNN);
            console.log('‚úÖ Conectado a la base de datos');
        }

        // Buscar usuarios que no tengan el campo 'avatar'
        const usersToUpdate = await User.find({
            avatar: { $exists: false }
        });

        console.log(`üìä Encontrados ${usersToUpdate.length} usuarios para actualizar`);

        if (usersToUpdate.length === 0) {
            console.log('‚úÖ No hay usuarios que necesiten migraci√≥n');
            return;
        }

        // Actualizar usuarios agregando el campo 'avatar' como null
        const updateResult = await User.updateMany(
            { avatar: { $exists: false } },
            { $set: { avatar: null } }
        );

        console.log(`‚úÖ Migraci√≥n de usuarios completada: ${updateResult.modifiedCount} usuarios actualizados`);

    } catch (error) {
        console.error('‚ùå Error durante la migraci√≥n de usuarios:', error);
    }
}

/**
 * Ejecutar todas las migraciones
 */
async function runMigrations() {
    console.log('üöÄ Iniciando migraciones del sistema de uploads...\n');
    
    await migrateProducts();
    console.log('');
    await migrateUsers();
    
    console.log('\nüéâ Migraciones completadas exitosamente!');
    process.exit(0);
}

// Ejecutar migraciones si este archivo es ejecutado directamente
if (require.main === module) {
    runMigrations();
}

module.exports = {
    migrateProducts,
    migrateUsers,
    runMigrations
};
